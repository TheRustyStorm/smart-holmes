<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (37 samples, 0.26%)</title><rect x="0.1426%" y="197" width="0.2638%" height="15" fill="rgb(227,0,7)"/><text x="0.3926%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (34 samples, 0.24%)</title><rect x="0.1640%" y="181" width="0.2424%" height="15" fill="rgb(217,0,24)"/><text x="0.4140%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (34 samples, 0.24%)</title><rect x="0.1640%" y="165" width="0.2424%" height="15" fill="rgb(221,193,54)"/><text x="0.4140%" y="175.50"></text></g><g><title>smart_holmes_binary`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (89 samples, 0.63%)</title><rect x="0.0570%" y="213" width="0.6346%" height="15" fill="rgb(248,212,6)"/><text x="0.3070%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (39 samples, 0.28%)</title><rect x="0.4136%" y="197" width="0.2781%" height="15" fill="rgb(208,68,35)"/><text x="0.6636%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (70 samples, 0.50%)</title><rect x="0.7416%" y="197" width="0.4991%" height="15" fill="rgb(232,128,0)"/><text x="0.9916%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (63 samples, 0.45%)</title><rect x="0.7915%" y="181" width="0.4492%" height="15" fill="rgb(207,160,47)"/><text x="1.0415%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (20 samples, 0.14%)</title><rect x="1.0981%" y="165" width="0.1426%" height="15" fill="rgb(228,23,34)"/><text x="1.3481%" y="175.50"></text></g><g><title>smart_holmes_binary`core::ptr::drop_in_place&lt;smart_holmes::smart_home::SmartHome&gt; (144 samples, 1.03%)</title><rect x="0.6917%" y="213" width="1.0268%" height="15" fill="rgb(218,30,26)"/><text x="0.9417%" y="223.50"></text></g><g><title>smart_holmes_binary`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;smart_holmes::update::Update&gt;&gt; (67 samples, 0.48%)</title><rect x="1.2407%" y="197" width="0.4778%" height="15" fill="rgb(220,122,19)"/><text x="1.4907%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (56 samples, 0.40%)</title><rect x="1.3192%" y="181" width="0.3993%" height="15" fill="rgb(250,228,42)"/><text x="1.5692%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (51 samples, 0.36%)</title><rect x="1.3548%" y="165" width="0.3637%" height="15" fill="rgb(240,193,28)"/><text x="1.6048%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (17 samples, 0.12%)</title><rect x="1.5973%" y="149" width="0.1212%" height="15" fill="rgb(216,20,37)"/><text x="1.8473%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.11%)</title><rect x="1.6044%" y="133" width="0.1141%" height="15" fill="rgb(206,188,39)"/><text x="1.8544%" y="143.50"></text></g><g><title>smart_holmes_binary`smart_holmes::smart_home::SmartHome::amount_fullfilled_dependencies (42 samples, 0.30%)</title><rect x="1.7185%" y="213" width="0.2995%" height="15" fill="rgb(217,207,13)"/><text x="1.9685%" y="223.50"></text></g><g><title>smart_holmes_binary`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.13%)</title><rect x="2.2319%" y="197" width="0.1284%" height="15" fill="rgb(231,73,38)"/><text x="2.4819%" y="207.50"></text></g><g><title>smart_holmes_binary`alloc::raw_vec::finish_grow (17 samples, 0.12%)</title><rect x="2.2390%" y="181" width="0.1212%" height="15" fill="rgb(225,20,46)"/><text x="2.4890%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (15 samples, 0.11%)</title><rect x="2.2533%" y="165" width="0.1070%" height="15" fill="rgb(210,31,41)"/><text x="2.5033%" y="175.50"></text></g><g><title>smart_holmes_binary`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (77 samples, 0.55%)</title><rect x="2.3602%" y="197" width="0.5491%" height="15" fill="rgb(221,200,47)"/><text x="2.6102%" y="207.50"></text></g><g><title>smart_holmes_binary`hashbrown::raw::RawTable&lt;T,A&gt;::insert (42 samples, 0.30%)</title><rect x="2.6098%" y="181" width="0.2995%" height="15" fill="rgb(226,26,5)"/><text x="2.8598%" y="191.50"></text></g><g><title>smart_holmes_binary`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 0.24%)</title><rect x="2.6669%" y="165" width="0.2424%" height="15" fill="rgb(249,33,26)"/><text x="2.9169%" y="175.50"></text></g><g><title>smart_holmes_binary`rand::seq::index::sample (20 samples, 0.14%)</title><rect x="3.1375%" y="181" width="0.1426%" height="15" fill="rgb(235,183,28)"/><text x="3.3875%" y="191.50"></text></g><g><title>smart_holmes_binary`smart_holmes::smart_home::SmartHome::new (205 samples, 1.46%)</title><rect x="2.0180%" y="213" width="1.4618%" height="15" fill="rgb(221,5,38)"/><text x="2.2680%" y="223.50"></text></g><g><title>smart_holmes_binary`smart_holmes::smart_home::SmartHome::generate_device (72 samples, 0.51%)</title><rect x="2.9663%" y="197" width="0.5134%" height="15" fill="rgb(247,18,42)"/><text x="3.2163%" y="207.50"></text></g><g><title>smart_holmes_binary`smart_holmes::update::Update::generate_new_update (28 samples, 0.20%)</title><rect x="3.2801%" y="181" width="0.1997%" height="15" fill="rgb(241,131,45)"/><text x="3.5301%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25 samples, 0.18%)</title><rect x="3.5653%" y="181" width="0.1783%" height="15" fill="rgb(249,31,29)"/><text x="3.8153%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.13%)</title><rect x="3.6152%" y="165" width="0.1284%" height="15" fill="rgb(225,111,53)"/><text x="3.8652%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.11%)</title><rect x="3.7864%" y="165" width="0.1141%" height="15" fill="rgb(238,160,17)"/><text x="4.0364%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.11%)</title><rect x="3.7935%" y="149" width="0.1070%" height="15" fill="rgb(214,148,48)"/><text x="4.0435%" y="159.50"></text></g><g><title>smart_holmes_binary`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.13%)</title><rect x="3.7792%" y="181" width="0.1284%" height="15" fill="rgb(232,36,49)"/><text x="4.0292%" y="191.50"></text></g><g><title>smart_holmes_binary`smart_holmes::smart_home::SmartHome::update_all (69 samples, 0.49%)</title><rect x="3.4797%" y="213" width="0.4920%" height="15" fill="rgb(209,103,24)"/><text x="3.7297%" y="223.50"></text></g><g><title>smart_holmes_binary`smart_holmes::device::Device::update (64 samples, 0.46%)</title><rect x="3.5154%" y="197" width="0.4564%" height="15" fill="rgb(229,88,8)"/><text x="3.7654%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.12%)</title><rect x="4.0787%" y="181" width="0.1212%" height="15" fill="rgb(213,181,19)"/><text x="4.3287%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.14%)</title><rect x="4.2570%" y="165" width="0.1355%" height="15" fill="rgb(254,191,54)"/><text x="4.5070%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.13%)</title><rect x="4.2641%" y="149" width="0.1284%" height="15" fill="rgb(241,83,37)"/><text x="4.5141%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.12%)</title><rect x="4.2712%" y="133" width="0.1212%" height="15" fill="rgb(233,36,39)"/><text x="4.5212%" y="143.50"></text></g><g><title>smart_holmes_binary`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (24 samples, 0.17%)</title><rect x="4.2499%" y="181" width="0.1711%" height="15" fill="rgb(226,3,54)"/><text x="4.4999%" y="191.50"></text></g><g><title>smart_holmes_binary`smart_holmes::smart_home::SmartHome::update_random (68 samples, 0.48%)</title><rect x="3.9718%" y="213" width="0.4849%" height="15" fill="rgb(245,192,40)"/><text x="4.2218%" y="223.50"></text></g><g><title>smart_holmes_binary`smart_holmes::device::Device::update (63 samples, 0.45%)</title><rect x="4.0074%" y="197" width="0.4492%" height="15" fill="rgb(238,167,29)"/><text x="4.2574%" y="207.50"></text></g><g><title>smart_holmes_binary`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.40%)</title><rect x="78.9432%" y="197" width="0.3993%" height="15" fill="rgb(232,182,51)"/><text x="79.1932%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (47 samples, 0.34%)</title><rect x="79.0074%" y="181" width="0.3351%" height="15" fill="rgb(231,60,39)"/><text x="79.2574%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (41 samples, 0.29%)</title><rect x="79.0502%" y="165" width="0.2924%" height="15" fill="rgb(208,69,12)"/><text x="79.3002%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (15 samples, 0.11%)</title><rect x="79.2356%" y="149" width="0.1070%" height="15" fill="rgb(235,93,37)"/><text x="79.4856%" y="159.50"></text></g><g><title>smart_holmes_binary`&lt;F as regex::re_unicode::Replacer&gt;::replace_append (22 samples, 0.16%)</title><rect x="79.6492%" y="133" width="0.1569%" height="15" fill="rgb(213,116,39)"/><text x="79.8992%" y="143.50"></text></g><g><title>smart_holmes_binary`indicatif::progress_bar::ProgressBar::inc (77 samples, 0.55%)</title><rect x="79.3568%" y="197" width="0.5491%" height="15" fill="rgb(222,207,29)"/><text x="79.6068%" y="207.50"></text></g><g><title>smart_holmes_binary`indicatif::state::ProgressState::update_and_draw (77 samples, 0.55%)</title><rect x="79.3568%" y="181" width="0.5491%" height="15" fill="rgb(206,96,30)"/><text x="79.6068%" y="191.50"></text></g><g><title>smart_holmes_binary`indicatif::style::ProgressStyle::format_state (75 samples, 0.53%)</title><rect x="79.3711%" y="165" width="0.5348%" height="15" fill="rgb(218,138,4)"/><text x="79.6211%" y="175.50"></text></g><g><title>smart_holmes_binary`regex::re_unicode::Regex::replace_all (40 samples, 0.29%)</title><rect x="79.6207%" y="149" width="0.2852%" height="15" fill="rgb(250,191,14)"/><text x="79.8707%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (40 samples, 0.29%)</title><rect x="80.0699%" y="181" width="0.2852%" height="15" fill="rgb(239,60,40)"/><text x="80.3199%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (39 samples, 0.28%)</title><rect x="80.0770%" y="165" width="0.2781%" height="15" fill="rgb(206,27,48)"/><text x="80.3270%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.11%)</title><rect x="80.3908%" y="165" width="0.1141%" height="15" fill="rgb(225,35,8)"/><text x="80.6408%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.11%)</title><rect x="80.3908%" y="149" width="0.1141%" height="15" fill="rgb(250,213,24)"/><text x="80.6408%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.11%)</title><rect x="80.3908%" y="133" width="0.1141%" height="15" fill="rgb(247,123,22)"/><text x="80.6408%" y="143.50"></text></g><g><title>smart_holmes_binary`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 0.20%)</title><rect x="80.3694%" y="181" width="0.1997%" height="15" fill="rgb(231,138,38)"/><text x="80.6194%" y="191.50"></text></g><g><title>smart_holmes_binary`smart_holmes::device::Device::update (115 samples, 0.82%)</title><rect x="79.9059%" y="197" width="0.8200%" height="15" fill="rgb(231,145,46)"/><text x="80.1559%" y="207.50"></text></g><g><title>smart_holmes_binary`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (20 samples, 0.14%)</title><rect x="80.5833%" y="181" width="0.1426%" height="15" fill="rgb(251,118,11)"/><text x="80.8333%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,298 samples, 16.39%)</title><rect x="80.8115%" y="181" width="16.3862%" height="15" fill="rgb(217,147,25)"/><text x="81.0615%" y="191.50">libsystem_platform.dylib`..</text></g><g><title>smart_holmes_binary`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (43 samples, 0.31%)</title><rect x="97.2048%" y="181" width="0.3066%" height="15" fill="rgb(247,81,37)"/><text x="97.4548%" y="191.50"></text></g><g><title>smart_holmes_binary`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (35 samples, 0.25%)</title><rect x="97.2618%" y="165" width="0.2496%" height="15" fill="rgb(209,12,38)"/><text x="97.5118%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (19 samples, 0.14%)</title><rect x="97.3759%" y="149" width="0.1355%" height="15" fill="rgb(227,1,9)"/><text x="97.6259%" y="159.50"></text></g><g><title>smart_holmes_binary`alloc::str::_&lt;impl str&gt;::replace (15 samples, 0.11%)</title><rect x="97.8109%" y="133" width="0.1070%" height="15" fill="rgb(248,47,43)"/><text x="98.0609%" y="143.50"></text></g><g><title>libsystem_c.dylib`isatty (38 samples, 0.27%)</title><rect x="97.9392%" y="101" width="0.2710%" height="15" fill="rgb(221,10,30)"/><text x="98.1892%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (36 samples, 0.26%)</title><rect x="97.9535%" y="85" width="0.2567%" height="15" fill="rgb(210,229,1)"/><text x="98.2035%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (29 samples, 0.21%)</title><rect x="98.2102%" y="101" width="0.2068%" height="15" fill="rgb(222,148,37)"/><text x="98.4602%" y="111.50"></text></g><g><title>smart_holmes_binary`indicatif::state::ProgressDrawTarget::width (71 samples, 0.51%)</title><rect x="97.9250%" y="133" width="0.5063%" height="15" fill="rgb(234,67,33)"/><text x="98.1750%" y="143.50"></text></g><g><title>smart_holmes_binary`terminal_size::unix::terminal_size_using_fd (70 samples, 0.50%)</title><rect x="97.9321%" y="117" width="0.4991%" height="15" fill="rgb(247,98,35)"/><text x="98.1821%" y="127.50"></text></g><g><title>smart_holmes_binary`alloc::fmt::format (20 samples, 0.14%)</title><rect x="98.5525%" y="117" width="0.1426%" height="15" fill="rgb(247,138,52)"/><text x="98.8025%" y="127.50"></text></g><g><title>smart_holmes_binary`core::fmt::write (18 samples, 0.13%)</title><rect x="98.5667%" y="101" width="0.1284%" height="15" fill="rgb(213,79,30)"/><text x="98.8167%" y="111.50"></text></g><g><title>smart_holmes_binary`indicatif::style::ProgressStyle::format_bar (51 samples, 0.36%)</title><rect x="98.4313%" y="133" width="0.3637%" height="15" fill="rgb(246,177,23)"/><text x="98.6813%" y="143.50"></text></g><g><title>smart_holmes_binary`regex::backtrack::Bounded&lt;I&gt;::backtrack (22 samples, 0.16%)</title><rect x="99.2584%" y="37" width="0.1569%" height="15" fill="rgb(230,62,27)"/><text x="99.5084%" y="47.50"></text></g><g><title>smart_holmes_binary`&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (29 samples, 0.21%)</title><rect x="99.2156%" y="85" width="0.2068%" height="15" fill="rgb(216,154,8)"/><text x="99.4656%" y="95.50"></text></g><g><title>smart_holmes_binary`regex::exec::ExecNoSync::exec_nfa (28 samples, 0.20%)</title><rect x="99.2228%" y="69" width="0.1997%" height="15" fill="rgb(244,35,45)"/><text x="99.4728%" y="79.50"></text></g><g><title>smart_holmes_binary`regex::backtrack::Bounded&lt;I&gt;::exec (25 samples, 0.18%)</title><rect x="99.2442%" y="53" width="0.1783%" height="15" fill="rgb(251,115,12)"/><text x="99.4942%" y="63.50"></text></g><g><title>smart_holmes_binary`&lt;F as regex::re_unicode::Replacer&gt;::replace_append (79 samples, 0.56%)</title><rect x="98.9375%" y="117" width="0.5633%" height="15" fill="rgb(240,54,50)"/><text x="99.1875%" y="127.50"></text></g><g><title>smart_holmes_binary`regex::re_unicode::Regex::captures (44 samples, 0.31%)</title><rect x="99.1871%" y="101" width="0.3137%" height="15" fill="rgb(233,84,52)"/><text x="99.4371%" y="111.50"></text></g><g><title>smart_holmes_binary`regex::backtrack::Bounded&lt;I&gt;::backtrack (24 samples, 0.17%)</title><rect x="99.5722%" y="37" width="0.1711%" height="15" fill="rgb(207,117,47)"/><text x="99.8222%" y="47.50"></text></g><g><title>smart_holmes_binary`&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (32 samples, 0.23%)</title><rect x="99.5222%" y="85" width="0.2282%" height="15" fill="rgb(249,43,39)"/><text x="99.7722%" y="95.50"></text></g><g><title>smart_holmes_binary`regex::exec::ExecNoSync::exec_nfa (30 samples, 0.21%)</title><rect x="99.5365%" y="69" width="0.2139%" height="15" fill="rgb(209,38,44)"/><text x="99.7865%" y="79.50"></text></g><g><title>smart_holmes_binary`regex::backtrack::Bounded&lt;I&gt;::exec (28 samples, 0.20%)</title><rect x="99.5508%" y="53" width="0.1997%" height="15" fill="rgb(236,212,23)"/><text x="99.8008%" y="63.50"></text></g><g><title>smart_holmes_binary`&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.34%)</title><rect x="99.5009%" y="117" width="0.3351%" height="15" fill="rgb(242,79,21)"/><text x="99.7509%" y="127.50"></text></g><g><title>smart_holmes_binary`&lt;regex::re_trait::CaptureMatches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.32%)</title><rect x="99.5151%" y="101" width="0.3209%" height="15" fill="rgb(211,96,35)"/><text x="99.7651%" y="111.50"></text></g><g><title>smart_holmes_binary`regex::re_unicode::Regex::replace_all (158 samples, 1.13%)</title><rect x="98.7949%" y="133" width="1.1266%" height="15" fill="rgb(253,215,40)"/><text x="99.0449%" y="143.50"></text></g><g><title>smart_holmes_binary`indicatif::style::ProgressStyle::format_state (313 samples, 2.23%)</title><rect x="97.6968%" y="149" width="2.2319%" height="15" fill="rgb(211,81,21)"/><text x="97.9468%" y="159.50">s..</text></g><g><title>smart_holmes_binary`indicatif::progress_bar::ProgressBar::inc (329 samples, 2.35%)</title><rect x="97.5970%" y="181" width="2.3460%" height="15" fill="rgb(208,190,38)"/><text x="97.8470%" y="191.50">s..</text></g><g><title>smart_holmes_binary`indicatif::state::ProgressState::update_and_draw (327 samples, 2.33%)</title><rect x="97.6112%" y="165" width="2.3317%" height="15" fill="rgb(235,213,38)"/><text x="97.8612%" y="175.50">s..</text></g><g><title>0x1 (14,023 samples, 99.99%)</title><rect x="0.0000%" y="325" width="99.9929%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="335.50">0x1</text></g><g><title>libdyld.dylib`start (14,023 samples, 99.99%)</title><rect x="0.0000%" y="309" width="99.9929%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="319.50">libdyld.dylib`start</text></g><g><title>smart_holmes_binary`main (14,021 samples, 99.98%)</title><rect x="0.0143%" y="293" width="99.9786%" height="15" fill="rgb(240,68,47)"/><text x="0.2643%" y="303.50">smart_holmes_binary`main</text></g><g><title>smart_holmes_binary`std::rt::lang_start_internal (14,021 samples, 99.98%)</title><rect x="0.0143%" y="277" width="99.9786%" height="15" fill="rgb(210,16,53)"/><text x="0.2643%" y="287.50">smart_holmes_binary`std::rt::lang_start_internal</text></g><g><title>smart_holmes_binary`std::rt::lang_start::_{{closure}} (14,021 samples, 99.98%)</title><rect x="0.0143%" y="261" width="99.9786%" height="15" fill="rgb(235,124,12)"/><text x="0.2643%" y="271.50">smart_holmes_binary`std::rt::lang_start::_{{closure}}</text></g><g><title>smart_holmes_binary`std::sys_common::backtrace::__rust_begin_short_backtrace (14,021 samples, 99.98%)</title><rect x="0.0143%" y="245" width="99.9786%" height="15" fill="rgb(224,169,11)"/><text x="0.2643%" y="255.50">smart_holmes_binary`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>smart_holmes_binary`smart_holmes_binary::main (14,021 samples, 99.98%)</title><rect x="0.0143%" y="229" width="99.9786%" height="15" fill="rgb(250,166,2)"/><text x="0.2643%" y="239.50">smart_holmes_binary`smart_holmes_binary::main</text></g><g><title>smart_holmes_binary`smart_holmes::smart_home::SmartHome::update_smart (13,397 samples, 95.53%)</title><rect x="4.4638%" y="213" width="95.5291%" height="15" fill="rgb(242,216,29)"/><text x="4.7138%" y="223.50">smart_holmes_binary`smart_holmes::smart_home::SmartHome::update_smart</text></g><g><title>smart_holmes_binary`smart_holmes::subsystem::Subsystem::find_subsystems (2,702 samples, 19.27%)</title><rect x="80.7259%" y="197" width="19.2670%" height="15" fill="rgb(230,116,27)"/><text x="80.9759%" y="207.50">smart_holmes_binary`smart_holm..</text></g><g><title>all (14,024 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="351.50"></text></g></svg></svg>