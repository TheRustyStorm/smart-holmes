<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="34165"><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 0.13%)</title><rect x="0.6849%" y="181" width="0.1346%" height="15" fill="rgb(227,0,7)" fg:x="234" fg:w="46"/><text x="0.9349%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24,920 samples, 72.94%)</title><rect x="0.8254%" y="181" width="72.9401%" height="15" fill="rgb(217,0,24)" fg:x="282" fg:w="24920"/><text x="1.0754%" y="191.50">libsystem_platform.dylib`_platform_memmove</text></g><g><title>smart_holmes_binary`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.01%)</title><rect x="73.7655%" y="181" width="0.0146%" height="15" fill="rgb(221,193,54)" fg:x="25202" fg:w="5"/><text x="74.0155%" y="191.50"></text></g><g><title>smart_holmes_binary`DYLD-STUB$$malloc (32 samples, 0.09%)</title><rect x="73.7802%" y="181" width="0.0937%" height="15" fill="rgb(248,212,6)" fg:x="25207" fg:w="32"/><text x="74.0302%" y="191.50"></text></g><g><title>smart_holmes_binary`DYLD-STUB$$memcpy (27 samples, 0.08%)</title><rect x="73.8738%" y="181" width="0.0790%" height="15" fill="rgb(208,68,35)" fg:x="25239" fg:w="27"/><text x="74.1238%" y="191.50"></text></g><g><title>smart_holmes_binary`__rdl_alloc (26 samples, 0.08%)</title><rect x="73.9558%" y="181" width="0.0761%" height="15" fill="rgb(232,128,0)" fg:x="25267" fg:w="26"/><text x="74.2058%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.01%)</title><rect x="74.0612%" y="149" width="0.0146%" height="15" fill="rgb(207,160,47)" fg:x="25303" fg:w="5"/><text x="74.3112%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.01%)</title><rect x="74.0612%" y="133" width="0.0146%" height="15" fill="rgb(228,23,34)" fg:x="25303" fg:w="5"/><text x="74.3112%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.01%)</title><rect x="74.0612%" y="117" width="0.0146%" height="15" fill="rgb(218,30,26)" fg:x="25303" fg:w="5"/><text x="74.3112%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.01%)</title><rect x="74.0612%" y="101" width="0.0146%" height="15" fill="rgb(220,122,19)" fg:x="25303" fg:w="5"/><text x="74.3112%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.01%)</title><rect x="74.0758%" y="101" width="0.0146%" height="15" fill="rgb(250,228,42)" fg:x="25308" fg:w="5"/><text x="74.3258%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (5 samples, 0.01%)</title><rect x="74.1022%" y="85" width="0.0146%" height="15" fill="rgb(240,193,28)" fg:x="25317" fg:w="5"/><text x="74.3522%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.01%)</title><rect x="74.1168%" y="85" width="0.0117%" height="15" fill="rgb(216,20,37)" fg:x="25322" fg:w="4"/><text x="74.3668%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.01%)</title><rect x="74.1168%" y="69" width="0.0117%" height="15" fill="rgb(206,188,39)" fg:x="25322" fg:w="4"/><text x="74.3668%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.04%)</title><rect x="74.1022%" y="101" width="0.0351%" height="15" fill="rgb(217,207,13)" fg:x="25317" fg:w="12"/><text x="74.3522%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (23 samples, 0.07%)</title><rect x="74.0758%" y="117" width="0.0673%" height="15" fill="rgb(231,73,38)" fg:x="25308" fg:w="23"/><text x="74.3258%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (86 samples, 0.25%)</title><rect x="74.0758%" y="133" width="0.2517%" height="15" fill="rgb(225,20,46)" fg:x="25308" fg:w="86"/><text x="74.3258%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (63 samples, 0.18%)</title><rect x="74.1431%" y="117" width="0.1844%" height="15" fill="rgb(210,31,41)" fg:x="25331" fg:w="63"/><text x="74.3931%" y="127.50"></text></g><g><title>smart_holmes_binary`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (102 samples, 0.30%)</title><rect x="74.0378%" y="181" width="0.2986%" height="15" fill="rgb(221,200,47)" fg:x="25295" fg:w="102"/><text x="74.2878%" y="191.50"></text></g><g><title>smart_holmes_binary`alloc::raw_vec::finish_grow (94 samples, 0.28%)</title><rect x="74.0612%" y="165" width="0.2751%" height="15" fill="rgb(226,26,5)" fg:x="25303" fg:w="94"/><text x="74.3112%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (89 samples, 0.26%)</title><rect x="74.0758%" y="149" width="0.2605%" height="15" fill="rgb(249,33,26)" fg:x="25308" fg:w="89"/><text x="74.3258%" y="159.50"></text></g><g><title>smart_holmes_binary`rand::rng::Rng::gen (7 samples, 0.02%)</title><rect x="74.3363%" y="181" width="0.0205%" height="15" fill="rgb(235,183,28)" fg:x="25397" fg:w="7"/><text x="74.5863%" y="191.50"></text></g><g><title>smart_holmes_binary`rand::rng::Rng::gen_range (17 samples, 0.05%)</title><rect x="74.3568%" y="181" width="0.0498%" height="15" fill="rgb(221,5,38)" fg:x="25404" fg:w="17"/><text x="74.6068%" y="191.50"></text></g><g><title>smart_holmes_binary`rand::seq::index::sample_inplace (9 samples, 0.03%)</title><rect x="74.4124%" y="181" width="0.0263%" height="15" fill="rgb(247,18,42)" fg:x="25423" fg:w="9"/><text x="74.6624%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (50 samples, 0.15%)</title><rect x="75.5188%" y="165" width="0.1463%" height="15" fill="rgb(241,131,45)" fg:x="25801" fg:w="50"/><text x="75.7688%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.02%)</title><rect x="76.3120%" y="149" width="0.0176%" height="15" fill="rgb(249,31,29)" fg:x="26072" fg:w="6"/><text x="76.5620%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.06%)</title><rect x="76.7247%" y="117" width="0.0556%" height="15" fill="rgb(225,111,53)" fg:x="26213" fg:w="19"/><text x="76.9747%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (110 samples, 0.32%)</title><rect x="76.5052%" y="133" width="0.3220%" height="15" fill="rgb(238,160,17)" fg:x="26138" fg:w="110"/><text x="76.7552%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (16 samples, 0.05%)</title><rect x="76.7803%" y="117" width="0.0468%" height="15" fill="rgb(214,148,48)" fg:x="26232" fg:w="16"/><text x="77.0303%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (172 samples, 0.50%)</title><rect x="76.3296%" y="149" width="0.5034%" height="15" fill="rgb(232,36,49)" fg:x="26078" fg:w="172"/><text x="76.5796%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (107 samples, 0.31%)</title><rect x="76.8330%" y="149" width="0.3132%" height="15" fill="rgb(209,103,24)" fg:x="26250" fg:w="107"/><text x="77.0830%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (46 samples, 0.13%)</title><rect x="77.5618%" y="133" width="0.1346%" height="15" fill="rgb(229,88,8)" fg:x="26499" fg:w="46"/><text x="77.8118%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (46 samples, 0.13%)</title><rect x="79.0897%" y="117" width="0.1346%" height="15" fill="rgb(213,181,19)" fg:x="27021" fg:w="46"/><text x="79.3397%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (45 samples, 0.13%)</title><rect x="79.0926%" y="101" width="0.1317%" height="15" fill="rgb(254,191,54)" fg:x="27022" fg:w="45"/><text x="79.3426%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_finalize_region (7 samples, 0.02%)</title><rect x="79.2244%" y="117" width="0.0205%" height="15" fill="rgb(241,83,37)" fg:x="27067" fg:w="7"/><text x="79.4744%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.01%)</title><rect x="79.2302%" y="101" width="0.0146%" height="15" fill="rgb(233,36,39)" fg:x="27069" fg:w="5"/><text x="79.4802%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (7 samples, 0.02%)</title><rect x="80.2400%" y="101" width="0.0205%" height="15" fill="rgb(226,3,54)" fg:x="27414" fg:w="7"/><text x="80.4900%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (885 samples, 2.59%)</title><rect x="77.6965%" y="133" width="2.5904%" height="15" fill="rgb(245,192,40)" fg:x="26545" fg:w="885"/><text x="77.9465%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (356 samples, 1.04%)</title><rect x="79.2448%" y="117" width="1.0420%" height="15" fill="rgb(238,167,29)" fg:x="27074" fg:w="356"/><text x="79.4948%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.03%)</title><rect x="80.2605%" y="101" width="0.0263%" height="15" fill="rgb(232,182,51)" fg:x="27421" fg:w="9"/><text x="80.5105%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.03%)</title><rect x="80.2868%" y="133" width="0.0263%" height="15" fill="rgb(231,60,39)" fg:x="27430" fg:w="9"/><text x="80.5368%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (22 samples, 0.06%)</title><rect x="80.8225%" y="117" width="0.0644%" height="15" fill="rgb(208,69,12)" fg:x="27613" fg:w="22"/><text x="81.0725%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (22 samples, 0.06%)</title><rect x="80.8225%" y="101" width="0.0644%" height="15" fill="rgb(235,93,37)" fg:x="27613" fg:w="22"/><text x="81.0725%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (228 samples, 0.67%)</title><rect x="80.8869%" y="117" width="0.6673%" height="15" fill="rgb(213,116,39)" fg:x="27635" fg:w="228"/><text x="81.1369%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_finalize_region (13 samples, 0.04%)</title><rect x="81.5542%" y="117" width="0.0381%" height="15" fill="rgb(222,207,29)" fg:x="27863" fg:w="13"/><text x="81.8042%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.04%)</title><rect x="81.5542%" y="101" width="0.0381%" height="15" fill="rgb(206,96,30)" fg:x="27863" fg:w="13"/><text x="81.8042%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,891 samples, 5.53%)</title><rect x="77.1462%" y="149" width="5.5349%" height="15" fill="rgb(218,138,4)" fg:x="26357" fg:w="1891"/><text x="77.3962%" y="159.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (809 samples, 2.37%)</title><rect x="80.3132%" y="133" width="2.3679%" height="15" fill="rgb(250,191,14)" fg:x="27439" fg:w="809"/><text x="80.5632%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (372 samples, 1.09%)</title><rect x="81.5923%" y="117" width="1.0888%" height="15" fill="rgb(239,60,40)" fg:x="27876" fg:w="372"/><text x="81.8423%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (84 samples, 0.25%)</title><rect x="82.4352%" y="101" width="0.2459%" height="15" fill="rgb(206,27,48)" fg:x="28164" fg:w="84"/><text x="82.6852%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,422 samples, 7.09%)</title><rect x="75.6652%" y="165" width="7.0891%" height="15" fill="rgb(225,35,8)" fg:x="25851" fg:w="2422"/><text x="75.9152%" y="175.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.07%)</title><rect x="82.6811%" y="149" width="0.0732%" height="15" fill="rgb(250,213,24)" fg:x="28248" fg:w="25"/><text x="82.9311%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (71 samples, 0.21%)</title><rect x="82.7543%" y="165" width="0.2078%" height="15" fill="rgb(247,123,22)" fg:x="28273" fg:w="71"/><text x="83.0043%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (42 samples, 0.12%)</title><rect x="82.9621%" y="165" width="0.1229%" height="15" fill="rgb(231,138,38)" fg:x="28344" fg:w="42"/><text x="83.2121%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (4 samples, 0.01%)</title><rect x="83.0850%" y="165" width="0.0117%" height="15" fill="rgb(231,145,46)" fg:x="28386" fg:w="4"/><text x="83.3350%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (51 samples, 0.15%)</title><rect x="83.0967%" y="165" width="0.1493%" height="15" fill="rgb(251,118,11)" fg:x="28390" fg:w="51"/><text x="83.3467%" y="175.50"></text></g><g><title>smart_holmes_binary`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (271 samples, 0.79%)</title><rect x="83.2460%" y="165" width="0.7932%" height="15" fill="rgb(217,147,25)" fg:x="28441" fg:w="271"/><text x="83.4960%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.02%)</title><rect x="84.1329%" y="149" width="0.0234%" height="15" fill="rgb(247,81,37)" fg:x="28744" fg:w="8"/><text x="84.3829%" y="159.50"></text></g><g><title>smart_holmes_binary`DYLD-STUB$$realloc (4 samples, 0.01%)</title><rect x="84.1563%" y="149" width="0.0117%" height="15" fill="rgb(209,12,38)" fg:x="28752" fg:w="4"/><text x="84.4063%" y="159.50"></text></g><g><title>smart_holmes_binary`__rdl_realloc (4 samples, 0.01%)</title><rect x="84.1680%" y="149" width="0.0117%" height="15" fill="rgb(227,1,9)" fg:x="28756" fg:w="4"/><text x="84.4180%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.02%)</title><rect x="84.2441%" y="133" width="0.0205%" height="15" fill="rgb(248,47,43)" fg:x="28782" fg:w="7"/><text x="84.4941%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (12 samples, 0.04%)</title><rect x="84.3495%" y="117" width="0.0351%" height="15" fill="rgb(221,10,30)" fg:x="28818" fg:w="12"/><text x="84.5995%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.01%)</title><rect x="84.4812%" y="101" width="0.0117%" height="15" fill="rgb(210,229,1)" fg:x="28863" fg:w="4"/><text x="84.7312%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (22 samples, 0.06%)</title><rect x="84.5427%" y="53" width="0.0644%" height="15" fill="rgb(222,148,37)" fg:x="28884" fg:w="22"/><text x="84.7927%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (31 samples, 0.09%)</title><rect x="84.5222%" y="85" width="0.0907%" height="15" fill="rgb(234,67,33)" fg:x="28877" fg:w="31"/><text x="84.7722%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (31 samples, 0.09%)</title><rect x="84.5222%" y="69" width="0.0907%" height="15" fill="rgb(247,98,35)" fg:x="28877" fg:w="31"/><text x="84.7722%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (92 samples, 0.27%)</title><rect x="84.4929%" y="101" width="0.2693%" height="15" fill="rgb(247,138,52)" fg:x="28867" fg:w="92"/><text x="84.7429%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (50 samples, 0.15%)</title><rect x="84.6158%" y="85" width="0.1463%" height="15" fill="rgb(213,79,30)" fg:x="28909" fg:w="50"/><text x="84.8658%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (50 samples, 0.15%)</title><rect x="84.6158%" y="69" width="0.1463%" height="15" fill="rgb(246,177,23)" fg:x="28909" fg:w="50"/><text x="84.8658%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (47 samples, 0.14%)</title><rect x="84.6246%" y="53" width="0.1376%" height="15" fill="rgb(230,62,27)" fg:x="28912" fg:w="47"/><text x="84.8746%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (18 samples, 0.05%)</title><rect x="84.7095%" y="37" width="0.0527%" height="15" fill="rgb(216,154,8)" fg:x="28941" fg:w="18"/><text x="84.9595%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (6 samples, 0.02%)</title><rect x="84.7622%" y="101" width="0.0176%" height="15" fill="rgb(244,35,45)" fg:x="28959" fg:w="6"/><text x="85.0122%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (6 samples, 0.02%)</title><rect x="84.7797%" y="101" width="0.0176%" height="15" fill="rgb(251,115,12)" fg:x="28965" fg:w="6"/><text x="85.0297%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (5 samples, 0.01%)</title><rect x="84.7973%" y="101" width="0.0146%" height="15" fill="rgb(240,54,50)" fg:x="28971" fg:w="5"/><text x="85.0473%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (30 samples, 0.09%)</title><rect x="84.8851%" y="85" width="0.0878%" height="15" fill="rgb(233,84,52)" fg:x="29001" fg:w="30"/><text x="85.1351%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.03%)</title><rect x="85.1251%" y="53" width="0.0263%" height="15" fill="rgb(207,117,47)" fg:x="29083" fg:w="9"/><text x="85.3751%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (63 samples, 0.18%)</title><rect x="84.9729%" y="85" width="0.1844%" height="15" fill="rgb(249,43,39)" fg:x="29031" fg:w="63"/><text x="85.2229%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (43 samples, 0.13%)</title><rect x="85.0315%" y="69" width="0.1259%" height="15" fill="rgb(209,38,44)" fg:x="29051" fg:w="43"/><text x="85.2815%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_size (9 samples, 0.03%)</title><rect x="85.1632%" y="85" width="0.0263%" height="15" fill="rgb(236,212,23)" fg:x="29096" fg:w="9"/><text x="85.4132%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (35 samples, 0.10%)</title><rect x="85.1895%" y="85" width="0.1024%" height="15" fill="rgb(242,79,21)" fg:x="29105" fg:w="35"/><text x="85.4395%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (28 samples, 0.08%)</title><rect x="85.2920%" y="85" width="0.0820%" height="15" fill="rgb(211,96,35)" fg:x="29140" fg:w="28"/><text x="85.5420%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.02%)</title><rect x="85.4032%" y="69" width="0.0205%" height="15" fill="rgb(253,215,40)" fg:x="29178" fg:w="7"/><text x="85.6532%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (7 samples, 0.02%)</title><rect x="85.5730%" y="53" width="0.0205%" height="15" fill="rgb(211,81,21)" fg:x="29236" fg:w="7"/><text x="85.8230%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (7 samples, 0.02%)</title><rect x="85.5730%" y="37" width="0.0205%" height="15" fill="rgb(208,190,38)" fg:x="29236" fg:w="7"/><text x="85.8230%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.02%)</title><rect x="85.7134%" y="37" width="0.0234%" height="15" fill="rgb(235,213,38)" fg:x="29284" fg:w="8"/><text x="85.9634%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (5 samples, 0.01%)</title><rect x="85.7369%" y="37" width="0.0146%" height="15" fill="rgb(237,122,38)" fg:x="29292" fg:w="5"/><text x="85.9869%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (118 samples, 0.35%)</title><rect x="85.4237%" y="69" width="0.3454%" height="15" fill="rgb(244,218,35)" fg:x="29185" fg:w="118"/><text x="85.6737%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (59 samples, 0.17%)</title><rect x="85.5964%" y="53" width="0.1727%" height="15" fill="rgb(240,68,47)" fg:x="29244" fg:w="59"/><text x="85.8464%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (6 samples, 0.02%)</title><rect x="85.7515%" y="37" width="0.0176%" height="15" fill="rgb(210,16,53)" fg:x="29297" fg:w="6"/><text x="86.0015%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (139 samples, 0.41%)</title><rect x="85.3739%" y="85" width="0.4068%" height="15" fill="rgb(235,124,12)" fg:x="29168" fg:w="139"/><text x="85.6239%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.01%)</title><rect x="85.7691%" y="69" width="0.0117%" height="15" fill="rgb(224,169,11)" fg:x="29303" fg:w="4"/><text x="86.0191%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.01%)</title><rect x="85.7691%" y="53" width="0.0117%" height="15" fill="rgb(250,166,2)" fg:x="29303" fg:w="4"/><text x="86.0191%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.06%)</title><rect x="85.7808%" y="85" width="0.0644%" height="15" fill="rgb(242,216,29)" fg:x="29307" fg:w="22"/><text x="86.0308%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.04%)</title><rect x="85.8013%" y="69" width="0.0439%" height="15" fill="rgb(230,116,27)" fg:x="29314" fg:w="15"/><text x="86.0513%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (361 samples, 1.06%)</title><rect x="84.8119%" y="101" width="1.0566%" height="15" fill="rgb(228,99,48)" fg:x="28976" fg:w="361"/><text x="85.0619%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (6 samples, 0.02%)</title><rect x="85.8510%" y="85" width="0.0176%" height="15" fill="rgb(253,11,6)" fg:x="29331" fg:w="6"/><text x="86.1010%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.02%)</title><rect x="85.8686%" y="101" width="0.0176%" height="15" fill="rgb(247,143,39)" fg:x="29337" fg:w="6"/><text x="86.1186%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2,479 samples, 7.26%)</title><rect x="84.3846%" y="117" width="7.2560%" height="15" fill="rgb(236,97,10)" fg:x="28830" fg:w="2479"/><text x="84.6346%" y="127.50">libsystem_..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,965 samples, 5.75%)</title><rect x="85.8891%" y="101" width="5.7515%" height="15" fill="rgb(233,208,19)" fg:x="29344" fg:w="1965"/><text x="86.1391%" y="111.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.01%)</title><rect x="91.6406%" y="117" width="0.0146%" height="15" fill="rgb(216,164,2)" fg:x="31309" fg:w="5"/><text x="91.8906%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (13 samples, 0.04%)</title><rect x="91.6552%" y="117" width="0.0381%" height="15" fill="rgb(220,129,5)" fg:x="31314" fg:w="13"/><text x="91.9052%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.01%)</title><rect x="91.6933%" y="117" width="0.0146%" height="15" fill="rgb(242,17,10)" fg:x="31327" fg:w="5"/><text x="91.9433%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (12 samples, 0.04%)</title><rect x="91.7079%" y="117" width="0.0351%" height="15" fill="rgb(242,107,0)" fg:x="31332" fg:w="12"/><text x="91.9579%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.02%)</title><rect x="91.7430%" y="117" width="0.0234%" height="15" fill="rgb(251,28,31)" fg:x="31344" fg:w="8"/><text x="91.9930%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,637 samples, 7.72%)</title><rect x="84.2646%" y="133" width="7.7184%" height="15" fill="rgb(233,223,10)" fg:x="28789" fg:w="2637"/><text x="84.5146%" y="143.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`szone_size (74 samples, 0.22%)</title><rect x="91.7664%" y="117" width="0.2166%" height="15" fill="rgb(215,21,27)" fg:x="31352" fg:w="74"/><text x="92.0164%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (66 samples, 0.19%)</title><rect x="91.7898%" y="101" width="0.1932%" height="15" fill="rgb(232,23,21)" fg:x="31360" fg:w="66"/><text x="92.0398%" y="111.50"></text></g><g><title>smart_holmes_binary`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,723 samples, 7.97%)</title><rect x="84.0392%" y="165" width="7.9701%" height="15" fill="rgb(244,5,23)" fg:x="28712" fg:w="2723"/><text x="84.2892%" y="175.50">smart_holme..</text></g><g><title>smart_holmes_binary`alloc::raw_vec::finish_grow (2,675 samples, 7.83%)</title><rect x="84.1797%" y="149" width="7.8297%" height="15" fill="rgb(226,81,46)" fg:x="28760" fg:w="2675"/><text x="84.4297%" y="159.50">smart_holme..</text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.03%)</title><rect x="91.9830%" y="133" width="0.0263%" height="15" fill="rgb(247,70,30)" fg:x="31426" fg:w="9"/><text x="92.2330%" y="143.50"></text></g><g><title>smart_holmes_binary`alloc::raw_vec::finish_grow (10 samples, 0.03%)</title><rect x="92.0094%" y="165" width="0.0293%" height="15" fill="rgb(212,68,19)" fg:x="31435" fg:w="10"/><text x="92.2594%" y="175.50"></text></g><g><title>smart_holmes_binary`rand::rng::Rng::gen (16 samples, 0.05%)</title><rect x="92.0386%" y="165" width="0.0468%" height="15" fill="rgb(240,187,13)" fg:x="31445" fg:w="16"/><text x="92.2886%" y="175.50"></text></g><g><title>smart_holmes_binary`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (6 samples, 0.02%)</title><rect x="92.9723%" y="133" width="0.0176%" height="15" fill="rgb(223,113,26)" fg:x="31764" fg:w="6"/><text x="93.2223%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (6 samples, 0.02%)</title><rect x="92.9723%" y="117" width="0.0176%" height="15" fill="rgb(206,192,2)" fg:x="31764" fg:w="6"/><text x="93.2223%" y="127.50"></text></g><g><title>smart_holmes_binary`rand::rng::Rng::gen_range (311 samples, 0.91%)</title><rect x="92.0855%" y="165" width="0.9103%" height="15" fill="rgb(241,108,4)" fg:x="31461" fg:w="311"/><text x="92.3355%" y="175.50"></text></g><g><title>smart_holmes_binary`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (8 samples, 0.02%)</title><rect x="92.9723%" y="149" width="0.0234%" height="15" fill="rgb(247,173,49)" fg:x="31764" fg:w="8"/><text x="93.2223%" y="159.50"></text></g><g><title>smart_holmes_binary`smart_holmes::smart_home::SmartHome::generate_device (31,817 samples, 93.13%)</title><rect x="0.0000%" y="197" width="93.1275%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="31817"/><text x="0.2500%" y="207.50">smart_holmes_binary`smart_holmes::smart_home::SmartHome::generate_device</text></g><g><title>smart_holmes_binary`smart_holmes::update::Update::generate_new_update (6,385 samples, 18.69%)</title><rect x="74.4388%" y="181" width="18.6887%" height="15" fill="rgb(245,159,27)" fg:x="25432" fg:w="6385"/><text x="74.6888%" y="191.50">smart_holmes_binary`smart_hol..</text></g><g><title>smart_holmes_binary`rand::rngs::thread::thread_rng (43 samples, 0.13%)</title><rect x="93.0016%" y="165" width="0.1259%" height="15" fill="rgb(245,172,44)" fg:x="31774" fg:w="43"/><text x="93.2516%" y="175.50"></text></g><g><title>dyld`start (31,829 samples, 93.16%)</title><rect x="0.0000%" y="309" width="93.1626%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="31829"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>smart_holmes_binary`main (31,829 samples, 93.16%)</title><rect x="0.0000%" y="293" width="93.1626%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="31829"/><text x="0.2500%" y="303.50">smart_holmes_binary`main</text></g><g><title>smart_holmes_binary`std::rt::lang_start_internal (31,829 samples, 93.16%)</title><rect x="0.0000%" y="277" width="93.1626%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="31829"/><text x="0.2500%" y="287.50">smart_holmes_binary`std::rt::lang_start_internal</text></g><g><title>smart_holmes_binary`std::rt::lang_start::_{{closure}} (31,829 samples, 93.16%)</title><rect x="0.0000%" y="261" width="93.1626%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="31829"/><text x="0.2500%" y="271.50">smart_holmes_binary`std::rt::lang_start::_{{closure}}</text></g><g><title>smart_holmes_binary`std::sys_common::backtrace::__rust_begin_short_backtrace (31,829 samples, 93.16%)</title><rect x="0.0000%" y="245" width="93.1626%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="31829"/><text x="0.2500%" y="255.50">smart_holmes_binary`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>smart_holmes_binary`smart_holmes_binary::main (31,829 samples, 93.16%)</title><rect x="0.0000%" y="229" width="93.1626%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="31829"/><text x="0.2500%" y="239.50">smart_holmes_binary`smart_holmes_binary::main</text></g><g><title>smart_holmes_binary`smart_holmes::smart_home::SmartHome::new (31,829 samples, 93.16%)</title><rect x="0.0000%" y="213" width="93.1626%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="31829"/><text x="0.2500%" y="223.50">smart_holmes_binary`smart_holmes::smart_home::SmartHome::new</text></g><g><title>smart_holmes_binary`smart_holmes::update::Update::generate_new_update (12 samples, 0.04%)</title><rect x="93.1275%" y="197" width="0.0351%" height="15" fill="rgb(221,13,13)" fg:x="31817" fg:w="12"/><text x="93.3775%" y="207.50"></text></g><g><title>all (34,165 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="34165"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2,336 samples, 6.84%)</title><rect x="93.1626%" y="309" width="6.8374%" height="15" fill="rgb(211,50,8)" fg:x="31829" fg:w="2336"/><text x="93.4126%" y="319.50">libsystem..</text></g></svg></svg>